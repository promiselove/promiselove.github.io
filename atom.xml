<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amadeus的博客</title>
  
  <subtitle>每一次失败都是成长的经历，每一次挫折都是成长的过程.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-18T04:09:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Amadeus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://yoursite.com/2017/11/18/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/11/18/抽象工厂模式/</id>
    <published>2017-11-18T03:05:20.000Z</published>
    <updated>2017-11-18T04:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式"></a>什么是抽象工厂模式</h3><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类.</p><h3 id="使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？"><a href="#使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？" class="headerlink" title="使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？"></a>使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？</h3><p>1.所有的工厂都是用来封装对象的创建<br>2.简单工厂虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类中解耦<br>3.工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象<br>4.抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露出来的方法中<br>5.所有的工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合<br>6.工厂方法允许类将实例化延迟到子类进行<br>7.抽象工厂创建相关的对象家族，而不需要依赖它们的具体类<br>8.依赖倒置原则指导我们避免依赖具体类型，而要尽量依赖抽象<br>9.工厂是很有威力的技巧，帮助我们针对抽象编程，而不需要针对具体类编程</p><a id="more"></a><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>这次我们的抽象工厂模式来自于之前的工厂模式改装<br>我们先创建一个原料工厂，纽约有纽约的原料工厂，芝加哥有芝加哥的原料工厂，但是不管是哪个工厂都必须实现这个原料工厂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 原料工厂接口</div><div class="line"> */</div><div class="line">public interface PizzaIngredientFactory &#123;</div><div class="line">    public Dough createDough();</div><div class="line">    public Sauce createSauce();</div><div class="line">    public Cheese createCheese();</div><div class="line">    public Veggies[] createVeggies();</div><div class="line">    public Pepperoni createPepperoni();</div><div class="line">    public Clams createClam();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来我们创建原料接口,所有的原料都必须实现这个接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 奶酪接口</div><div class="line"> */</div><div class="line">public interface Cheese &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 蛤蚌接口</div><div class="line"> */</div><div class="line">public interface Clams &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 面团接口</div><div class="line"> */</div><div class="line">public interface Dough &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 意大利香肠</div><div class="line"> */</div><div class="line">public interface Pepperoni &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 调料</div><div class="line"> */</div><div class="line">public interface Sauce &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 蔬菜</div><div class="line"> */</div><div class="line">public interface Veggies &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好了，我们现在已经拥有了制作披萨的所有原料接口，接下来创建一组制作披萨的原料<br>先制作纽约披萨店制作披萨所需要的原料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约人喜欢吃新鲜的蛤蚌</div><div class="line"> */</div><div class="line">public class FreshClams implements Clams &#123;</div><div class="line">    public FreshClams()&#123;</div><div class="line">        System.out.println(&quot;纽约风格的新鲜蛤蜊&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约版本的调料</div><div class="line"> */</div><div class="line">public class MarinaraSauce implements Sauce &#123;</div><div class="line">    public MarinaraSauce()&#123;</div><div class="line">        System.out.println(&quot;纽约风格酱料&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约风格的奶酪</div><div class="line"> */</div><div class="line">public class ReggianoCheese implements Cheese&#123;</div><div class="line">    public ReggianoCheese()&#123;</div><div class="line">        System.out.println(&quot;纽约风格奶酪&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约风格的意大利肠</div><div class="line"> */</div><div class="line">public class SlicedPepperoni implements Pepperoni&#123;</div><div class="line">    public SlicedPepperoni()&#123;</div><div class="line">        System.out.println(&quot;纽约风格意大利肠&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约版本的面团</div><div class="line"> */</div><div class="line">public class ThinCrustDough implements Dough &#123;</div><div class="line">    public ThinCrustDough()&#123;</div><div class="line">        System.out.println(&quot;勤劳的纽约人自己揉的面团&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再来创建芝加哥披萨店创建披萨所需要的原料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥风格奶酪</div><div class="line"> */</div><div class="line">public class ChicagoCheese implements Cheese&#123;</div><div class="line">    public ChicagoCheese()&#123;</div><div class="line">        System.out.println(&quot;芝加哥风格奶酪&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥人自己揉的面团</div><div class="line"> */</div><div class="line">public class ChicagoDough implements Dough &#123;</div><div class="line">    public ChicagoDough()&#123;</div><div class="line">        System.out.println(&quot;芝加哥人自己揉的面团&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥风味意大利肠</div><div class="line"> */</div><div class="line">public class ChicagoPepperoni implements Pepperoni&#123;</div><div class="line">    public ChicagoPepperoni()&#123;</div><div class="line">        System.out.println(&quot;芝加哥风味意大利肠&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥风格酱料</div><div class="line"> */</div><div class="line">public class ChicagoSauce implements Sauce &#123;</div><div class="line">    public ChicagoSauce()&#123;</div><div class="line">        System.out.println(&quot;芝加哥风格酱料&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥人不喜欢新鲜的蛤蜊</div><div class="line"> */</div><div class="line">public class ChicagoClams implements Clams &#123;</div><div class="line">    public ChicagoClams()&#123;</div><div class="line">        System.out.println(&quot;芝加哥人不喜欢新鲜的蛤蜊&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再来一个通用的蔬菜<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 大蒜</div><div class="line"> */</div><div class="line">public class Garlic implements Veggies&#123;</div><div class="line">    public Garlic()&#123;</div><div class="line">        System.out.println(&quot;添加一点大蒜&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 蘑菇</div><div class="line"> */</div><div class="line">public class Mushroom implements Veggies&#123;</div><div class="line">    public Mushroom()&#123;</div><div class="line">        System.out.println(&quot;蘑菇来一点&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 洋葱</div><div class="line"> */</div><div class="line">public class Onion implements Veggies&#123;</div><div class="line">    public Onion()&#123;</div><div class="line">        System.out.println(&quot;洋葱加一点&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 红辣椒</div><div class="line"> */</div><div class="line">public class Redpepper implements Veggies&#123;</div><div class="line">    public Redpepper()&#123;</div><div class="line">        System.out.println(&quot;红辣椒还是很不错的&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们已经有了披萨的原料，现在我们创建一个披萨父类，所有披萨都要继承自该类，该类里有制作披萨的所有原料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public abstract class Pizza &#123;</div><div class="line">    String name;</div><div class="line">    Dough dough;//面团</div><div class="line">    Sauce sauce;//佐料 调味料</div><div class="line">    Veggies[] veggies;//蔬菜</div><div class="line">    Cheese cheese;//奶酪</div><div class="line">    Pepperoni pepperoni;//意大利切片肠</div><div class="line">    Clams clams;//蛤蚌</div><div class="line">    abstract void prepare();</div><div class="line"></div><div class="line">    void bake()&#123;//烘烤</div><div class="line">        System.out.println(&quot;烘烤25分钟到30分钟...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void cut()&#123;//切片</div><div class="line">        System.out.println(&quot;把这个pizza按照对角线大卸八块...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void box()&#123;//打包</div><div class="line">        System.out.println(&quot;最后把pizza打包...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setName(String name)&#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    public String getName()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在我们要开始加工披萨了，先创建纽纽约和芝加哥的原料工厂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约原料工厂</div><div class="line"> */</div><div class="line">public class NYPizzaIngredientFactory implements PizzaIngredientFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Dough createDough() &#123;</div><div class="line">        return new ThinCrustDough();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Sauce createSauce() &#123;</div><div class="line">        return new MarinaraSauce();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Cheese createCheese() &#123;</div><div class="line">        return new ReggianoCheese();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Veggies[] createVeggies() &#123;</div><div class="line">        Veggies[] veggies = &#123;new Garlic(),new Onion(),new Mushroom(),new Redpepper()&#125;;</div><div class="line">        return veggies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Pepperoni createPepperoni() &#123;</div><div class="line">        return new SlicedPepperoni();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Clams createClam() &#123;</div><div class="line">        return new FreshClams();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥原料工厂</div><div class="line"> */</div><div class="line">public class ChicagoPizzaIngredientFactory implements PizzaIngredientFactory &#123;</div><div class="line">    @Override</div><div class="line">    public Dough createDough() &#123;</div><div class="line">        return new ChicagoDough();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Sauce createSauce() &#123;</div><div class="line">        return new ChicagoSauce();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Cheese createCheese() &#123;</div><div class="line">        return new ChicagoCheese();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Veggies[] createVeggies() &#123;</div><div class="line">        Veggies[] veggies = &#123;new Garlic(),new Onion(),new Mushroom(),new Redpepper()&#125;;</div><div class="line">        return veggies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Pepperoni createPepperoni() &#123;</div><div class="line">        return new ChicagoPepperoni();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Clams createClam() &#123;</div><div class="line">        return new ChicagoClams();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好了我们现在和工厂已经谈妥了，他们会为我们持续供应原材料<br>现在我们要开两个店,首先我们创建一个总店，所有的店面都必须继承自该类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public abstract class PizzaStore &#123;</div><div class="line"></div><div class="line">    public Pizza orderPizza(String type)&#123;</div><div class="line">        Pizza pizza;</div><div class="line">        pizza = createPizza(type);</div><div class="line">        pizza.prepare();</div><div class="line">        pizza.bake();</div><div class="line">        pizza.cut();</div><div class="line">        pizza.box();</div><div class="line">        return pizza;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract Pizza createPizza(String type);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在我们来开具体的店铺<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 纽约披萨店</div><div class="line"> */</div><div class="line">public class NYCPizzaStore extends PizzaStore&#123;</div><div class="line">    @Override</div><div class="line">    protected Pizza createPizza(String type) &#123;</div><div class="line">        Pizza pizza = null;</div><div class="line">        PizzaIngredientFactory pizzaIngredientFactory = new NYPizzaIngredientFactory();</div><div class="line">        if(&quot;cheese&quot;.equals(type))&#123;</div><div class="line">            pizza = new CheesePizza(pizzaIngredientFactory);</div><div class="line">            pizza.setName(&quot;NYC风格的奶酪披萨&quot;);</div><div class="line">        &#125;else if(&quot;clam&quot;.equals(type))&#123;</div><div class="line">            pizza = new ClamPizza(pizzaIngredientFactory);</div><div class="line">            pizza.setName(&quot;NYC风格的蛤蜊披萨&quot;);</div><div class="line">        &#125;</div><div class="line">        return pizza;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 芝加哥披萨店</div><div class="line"> */</div><div class="line">public class ChicagoPizzaStore extends PizzaStore&#123;</div><div class="line">    @Override</div><div class="line">    protected Pizza createPizza(String type) &#123;</div><div class="line">        Pizza pizza = null;</div><div class="line">        PizzaIngredientFactory pizzaIngredientFactory = new ChicagoPizzaIngredientFactory();</div><div class="line">        if(&quot;cheese&quot;.equals(type))&#123;</div><div class="line">            pizza = new CheesePizza(pizzaIngredientFactory);</div><div class="line">            pizza.setName(&quot;芝加哥风味的奶酪披萨&quot;);</div><div class="line">        &#125;else if(&quot;clam&quot;.equals(type))&#123;</div><div class="line">            pizza = new ClamPizza(pizzaIngredientFactory);</div><div class="line">            pizza.setName(&quot;芝加哥风味的蛤蜊披萨&quot;);</div><div class="line">        &#125;</div><div class="line">        return pizza;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至此我们已经完成了所有的从原料到到工厂到店面，现在我们已经可以开张了<br>我们目前有两种口味的披萨<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 奶酪披萨</div><div class="line"> */</div><div class="line">public class CheesePizza extends Pizza&#123;</div><div class="line">    PizzaIngredientFactory pizzaIngredientFactory;</div><div class="line"></div><div class="line">    public CheesePizza(PizzaIngredientFactory pizzaIngredientFactory)&#123;</div><div class="line">        this.pizzaIngredientFactory = pizzaIngredientFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void prepare() &#123;</div><div class="line">        System.out.println(&quot;Preparing准备 &quot;+name);</div><div class="line">        dough = pizzaIngredientFactory.createDough();</div><div class="line">        sauce = pizzaIngredientFactory.createSauce();</div><div class="line">        cheese = pizzaIngredientFactory.createCheese();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 蛤蜊披萨</div><div class="line"> */</div><div class="line">public class ClamPizza extends Pizza&#123;</div><div class="line">    PizzaIngredientFactory pizzaIngredientFactory;</div><div class="line"></div><div class="line">    public ClamPizza(PizzaIngredientFactory pizzaIngredientFactory)&#123;</div><div class="line">        this.pizzaIngredientFactory = pizzaIngredientFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void prepare() &#123;</div><div class="line">        System.out.println(&quot;Preparing准备 &quot;+name);</div><div class="line">        dough = pizzaIngredientFactory.createDough();</div><div class="line">        sauce = pizzaIngredientFactory.createSauce();</div><div class="line">        cheese = pizzaIngredientFactory.createCheese();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在已经万事俱备只欠东风了(订单)<br>写个测试类测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;Ethan喜欢吃纽约披萨&quot;);</div><div class="line">        PizzaStore nycPizzaStore = new NYCPizzaStore();</div><div class="line">        nycPizzaStore.orderPizza(&quot;cheese&quot;);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(&quot;Joel相对于纽约披萨更喜欢芝加哥披萨&quot;);</div><div class="line">        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();</div><div class="line">        chicagoPizzaStore.orderPizza(&quot;clam&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果</p><p>Ethan喜欢吃纽约披萨<br>Preparing准备 NYC风格的奶酪披萨<br>勤劳的纽约人自己揉的面团<br>纽约风格酱料<br>纽约风格奶酪<br>烘烤25分钟到30分钟…<br>把这个pizza按照对角线大卸八块…<br>最后把pizza打包…</p><p>Joel相对于纽约披萨更喜欢芝加哥披萨<br>Preparing准备 芝加哥风味的蛤蜊披萨<br>芝加哥人自己揉的面团<br>芝加哥风格酱料<br>芝加哥风格奶酪<br>烘烤25分钟到30分钟…<br>把这个pizza按照对角线大卸八块…<br>最后把pizza打包…</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用工厂模式和抽象工厂模式都可以将对象的创建封装起来，以便将代码从具体的实现类中解耦。<br>多用组合，例如工厂模式我们要创建纽约风格的奶酪味披萨，我们这里就直接直接是奶酪味的披萨再和纽约组合起来，这样就实现了解耦</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是抽象工厂模式&quot;&gt;&lt;a href=&quot;#什么是抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;什么是抽象工厂模式&quot;&gt;&lt;/a&gt;什么是抽象工厂模式&lt;/h3&gt;&lt;p&gt;提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类.&lt;/p&gt;
&lt;h3 id=&quot;使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？&quot;&gt;&lt;a href=&quot;#使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？&quot;&gt;&lt;/a&gt;使用抽象工厂模式有什么好处，它和抽象工厂模式有什么区别？&lt;/h3&gt;&lt;p&gt;1.所有的工厂都是用来封装对象的创建&lt;br&gt;2.简单工厂虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类中解耦&lt;br&gt;3.工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象&lt;br&gt;4.抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露出来的方法中&lt;br&gt;5.所有的工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合&lt;br&gt;6.工厂方法允许类将实例化延迟到子类进行&lt;br&gt;7.抽象工厂创建相关的对象家族，而不需要依赖它们的具体类&lt;br&gt;8.依赖倒置原则指导我们避免依赖具体类型，而要尽量依赖抽象&lt;br&gt;9.工厂是很有威力的技巧，帮助我们针对抽象编程，而不需要针对具体类编程&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://yoursite.com/2017/11/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/11/11/工厂模式/</id>
    <published>2017-11-11T03:13:53.000Z</published>
    <updated>2017-11-11T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h3><p>定义：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工行方法让类把实例化推迟到子类.工厂模式通常通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>依赖倒置原则：要依赖抽象，不要依赖具体类<br>通过以下三个设计思想可以帮我们达到遵循依赖倒置原则的目的<br>1)变量不可以持有具体类的引用<br>2)不要让类派生自具体类<br>3)不要覆盖基类中已实现的方法</p><p>其实严格意义上说我们应该尽量达到三个设计思想，而不是随时都要遵循这个原则。</p><a id="more"></a><h3 id="下面以一个披萨店的例子来认识以下工厂模式（HeadFirst设计模式）"><a href="#下面以一个披萨店的例子来认识以下工厂模式（HeadFirst设计模式）" class="headerlink" title="下面以一个披萨店的例子来认识以下工厂模式（HeadFirst设计模式）"></a>下面以一个披萨店的例子来认识以下工厂模式（HeadFirst设计模式）</h3><p>1.首先我们需要一个披萨,所有的披萨都应该继承该类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public abstract class Pizza &#123;</div><div class="line">    String name;</div><div class="line">    String dough;//面团</div><div class="line">    String sauce;//佐料 调味料</div><div class="line">    ArrayList toppings = new ArrayList();</div><div class="line"></div><div class="line">    void prepare()&#123;</div><div class="line">        System.out.println(&quot;Preparing准备&quot;+name);</div><div class="line">        System.out.println(&quot;Tossing dough拌面团&quot;+dough);</div><div class="line">        System.out.println(&quot;Adding sauce加佐料&quot;+sauce);</div><div class="line">        System.out.println(&quot;Adding toppings按照步骤进行: &quot;);</div><div class="line">        for(int i = 0,size = toppings.size(); i &lt; size; i++)&#123;</div><div class="line">            System.out.println(&quot;    &quot;+toppings.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void bake()&#123;//烘烤</div><div class="line">        System.out.println(&quot;烘烤25分钟到30分钟...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void cut()&#123;//切片</div><div class="line">        System.out.println(&quot;把这个pizza按照对角线大卸八块...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void box()&#123;//打包</div><div class="line">        System.out.println(&quot;最后把pizza打包...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.因为每个地方都有不同的披萨店，每个披萨店制作披萨的风味存在差异，所以我们按照不同地方的风味制作不同的披萨<br>纽约风味的披萨<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class NYStyleCheesePizza extends Pizza &#123;</div><div class="line">    public NYStyleCheesePizza()&#123;</div><div class="line">        name = &quot;NY Style Sauce and Cheese Pizza纽约风格佐料的奶酪pizza&quot;;</div><div class="line">        dough = &quot;Thin Crust Dough纽约风格披萨面团皮很薄&quot;;</div><div class="line">        sauce = &quot;Marinara Sauce加番茄酱&quot;;</div><div class="line"></div><div class="line">        toppings.add(&quot;Grated Reggiano Cheese碎雷奇亚干酪奶酪...(不知道什么鬼，听起来好像很好吃的样子)&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>芝加哥风味的披萨,不同于纽约人，芝加哥人喜欢把披萨切成方形的（可能吃1块就饱了吧）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class ChicagoStyleCheesePizza extends Pizza &#123;</div><div class="line">    public ChicagoStyleCheesePizza()&#123;</div><div class="line">        name = &quot;Chicago Style Deep Dish Cheese Pizza芝加哥风味的奶酪pizza&quot;;</div><div class="line">        dough = &quot;Extra Thick Crust Dough喜欢吃厚面团&quot;;</div><div class="line">        sauce = &quot;Plum Tomato Sauce小番茄酱料&quot;;</div><div class="line"></div><div class="line">        toppings.add(&quot;Shredded Mozzarella Cheese芝加哥风味喜欢意大利白干酪&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void cut()&#123;</div><div class="line">        System.out.println(&quot;Cutting the pizza into square slices芝加哥人喜欢把pizza切成正方形(口味很刁钻)&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3.好了，我们现在已经有了两个地区风味的皮塞了，但是我们没有商店卖呀，总不能让我们去推个车在大街上吆喝把，好吧，那我们给你们盘一个店面总行了吧<br>我们有一个披萨的总店，里面包含了披萨的标准制作流程，所有的披萨店都要继承该类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public abstract class PizzaStore &#123;</div><div class="line"></div><div class="line">    public Pizza orderPizza(String type)&#123;</div><div class="line">        Pizza pizza;</div><div class="line">        pizza = createPizza(type);</div><div class="line">        pizza.prepare();</div><div class="line">        pizza.bake();</div><div class="line">        pizza.cut();</div><div class="line">        pizza.box();</div><div class="line">        return pizza;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract Pizza createPizza(String type);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们先来建造纽约的店，大都市的生意应该挺好做的。注意，我们这里要重写父类PizzaStore的createPizza方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class NYPizzaStore extends PizzaStore &#123;</div><div class="line">    @Override</div><div class="line">    protected Pizza createPizza(String type) &#123;</div><div class="line">        if(&quot;cheese&quot;.equals(type))&#123;</div><div class="line">            return new NYStyleCheesePizza();</div><div class="line">        &#125;else&#123;</div><div class="line">            System.out.println(&quot;更多口味正在研发中&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再开一家芝加哥分店<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ChicagoPizzaStore extends PizzaStore &#123;</div><div class="line">    @Override</div><div class="line">    protected Pizza createPizza(String type) &#123;</div><div class="line">        if(&quot;cheese&quot;.equals(type))&#123;</div><div class="line">            return new ChicagoStyleCheesePizza();</div><div class="line">        &#125;else&#123;</div><div class="line">            System.out.println(&quot;更多风味正在研发中&quot;);</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4.好了，现在店面和披萨都有了，我们是不是该选个黄道吉日开门营业了（行了，别瞎扯了，我饿了，先给我来一个披萨再说）<br>我们写个测试类测试一下我们的披萨制作流程到底标不标准（必须标准啊，这还用问）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        PizzaStore nyStore = new NYPizzaStore();</div><div class="line">        PizzaStore chicagoStore = new ChicagoPizzaStore();</div><div class="line"></div><div class="line">        Pizza pizza = nyStore.orderPizza(&quot;cheese&quot;);</div><div class="line">        System.out.println(&quot;Ethan(纽约人) ordered a &quot;+pizza.getName()+&quot;\n&quot;);</div><div class="line"></div><div class="line">        pizza = chicagoStore.orderPizza(&quot;cheese&quot;);</div><div class="line">        System.out.println(&quot;Joel(芝加哥人) ordered a &quot;+pizza.getName()+&quot;\n&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>5.输出结果<br>Preparing准备NY Style Sauce and Cheese Pizza纽约风格佐料的奶酪pizza<br>Tossing dough拌面团Thin Crust Dough纽约风格披萨面团皮很薄<br>Adding sauce加佐料Marinara Sauce加番茄酱<br>Adding toppings按照步骤进行:<br>    Grated Reggiano Cheese碎雷奇亚干酪奶酪…(不知道什么鬼，听起来好像很好吃的样子)<br>烘烤25分钟到30分钟…<br>把这个pizza按照对角线大卸八块…<br>最后把pizza打包…<br>Ethan(纽约人) ordered a NY Style Sauce and Cheese Pizza纽约风格佐料的奶酪pizza</p><p>Preparing准备Chicago Style Deep Dish Cheese Pizza芝加哥风味的奶酪pizza<br>Tossing dough拌面团Extra Thick Crust Dough喜欢吃厚面团<br>Adding sauce加佐料Plum Tomato Sauce小番茄酱料<br>Adding toppings按照步骤进行:<br>    Shredded Mozzarella Cheese芝加哥风味喜欢意大利白干酪<br>烘烤25分钟到30分钟…<br>Cutting the pizza into square slices芝加哥人喜欢把pizza切成正方形(口味很刁钻)<br>最后把pizza打包…<br>Joel(芝加哥人) ordered a Chicago Style Deep Dish Cheese Pizza芝加哥风味的奶酪pizza<br>6.好了我们现在已经完成了两种地域风格的披萨制作，吃是吃饱了，我们来回顾一下我们到底学到了什么东西<br>下面附上工厂模式的类图<br><img src="/css/images/factory.jpg" alt="image"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>工厂方法模式帮助我们将产品的“实现”从“使用”中解耦,如果增加产品或者修改产品的实现，我们的披萨商店不会受到影响，因为PizzoStore和任何产品之间都不是紧耦合关系</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是工厂模式&quot;&gt;&lt;a href=&quot;#什么是工厂模式&quot; class=&quot;headerlink&quot; title=&quot;什么是工厂模式&quot;&gt;&lt;/a&gt;什么是工厂模式&lt;/h3&gt;&lt;p&gt;定义：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工行方法让类把实例化推迟到子类.工厂模式通常通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装&lt;/p&gt;
&lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;p&gt;依赖倒置原则：要依赖抽象，不要依赖具体类&lt;br&gt;通过以下三个设计思想可以帮我们达到遵循依赖倒置原则的目的&lt;br&gt;1)变量不可以持有具体类的引用&lt;br&gt;2)不要让类派生自具体类&lt;br&gt;3)不要覆盖基类中已实现的方法&lt;/p&gt;
&lt;p&gt;其实严格意义上说我们应该尽量达到三个设计思想，而不是随时都要遵循这个原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰者模式</title>
    <link href="http://yoursite.com/2017/10/31/decorator/"/>
    <id>http://yoursite.com/2017/10/31/decorator/</id>
    <published>2017-10-31T02:30:03.000Z</published>
    <updated>2017-10-31T03:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是装饰者模式？"><a href="#什么是装饰者模式？" class="headerlink" title="什么是装饰者模式？"></a>什么是装饰者模式？</h3><p>定义：装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>1.开闭原则，即对修改关闭，对扩展开放<br>2.多用组合，少用继承</p><a id="more"></a><h3 id="以咖啡店售卖咖啡为例"><a href="#以咖啡店售卖咖啡为例" class="headerlink" title="以咖啡店售卖咖啡为例"></a>以咖啡店售卖咖啡为例</h3><p>咖啡是所有咖啡和咖啡调味品的基类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class Coffee &#123;</div><div class="line">    protected String name;</div><div class="line"></div><div class="line">    public String getName()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract double getPrice();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建一个摩卡咖啡继承自该基类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Mocha extends Coffee &#123;</div><div class="line"></div><div class="line">    public Mocha()&#123;</div><div class="line">        name = &quot;摩卡咖啡&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 20;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再来一个调味品抽象类继承咖啡基类，该类是所有调味品的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Condiment extends Coffee &#123;</div><div class="line">    public abstract String getName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>具体的咖啡装饰者继承自调味品类(给咖啡加点糖)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Sugar extends Condiment &#123;</div><div class="line">    Coffee coffee;</div><div class="line"></div><div class="line">    public Sugar(Coffee coffee)&#123;</div><div class="line">        this.coffee = coffee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return coffee.getName()+&quot;,加糖&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 1+coffee.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再给咖啡加点奶<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Milk extends Condiment &#123;</div><div class="line">    Coffee coffee;</div><div class="line"></div><div class="line">    public Milk(Coffee coffee)&#123;</div><div class="line">        this.coffee = coffee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return coffee.getName()+&quot;,加牛奶&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 2+coffee.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>好了，我们来写一个测试类测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Coffee coffees = new Mocha();</div><div class="line">        System.out.println(coffees.getName()+&quot;-价格-&quot;+coffees.getPrice());</div><div class="line">        Sugar sugars = new Sugar(coffees);</div><div class="line">        System.out.println(sugars.getName()+&quot;-价格-&quot;+sugars.getPrice());</div><div class="line">        Milk milks = new Milk(sugars);</div><div class="line">        System.out.println(milks.getName()+&quot;-价格-&quot;+milks.getPrice());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果<br>摩卡咖啡-价格-20.0<br>摩卡咖啡,加糖-价格-21.0<br>摩卡咖啡,加糖,加牛奶-价格-23.0</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果有再多一个装饰者我们只需要扩展一个类去继承自调味品类，然后去装饰咖啡就行了。同样的再多一个咖啡品种我们只需要去继承自咖啡的基类就行了。java的io实现也是装饰者模式，都是围绕着InputStream或者OutputStream两个基类去扩展的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是装饰者模式？&quot;&gt;&lt;a href=&quot;#什么是装饰者模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰者模式？&quot;&gt;&lt;/a&gt;什么是装饰者模式？&lt;/h3&gt;&lt;p&gt;定义：装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;
&lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;p&gt;1.开闭原则，即对修改关闭，对扩展开放&lt;br&gt;2.多用组合，少用继承&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略者模式</title>
    <link href="http://yoursite.com/2017/03/13/strategy/"/>
    <id>http://yoursite.com/2017/03/13/strategy/</id>
    <published>2017-03-13T07:51:21.000Z</published>
    <updated>2017-10-31T02:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鸭子的父类，所有鸭子都继承自该类"><a href="#鸭子的父类，所有鸭子都继承自该类" class="headerlink" title="鸭子的父类，所有鸭子都继承自该类"></a>鸭子的父类，所有鸭子都继承自该类</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck &#123;</div><div class="line">    public FlyBehavior flyBehavior;</div><div class="line">    public QuackBehavior quackBehavior;</div><div class="line"></div><div class="line">    public Duck()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public abstract void display();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 飞行行为接口</div><div class="line">     */</div><div class="line">    public void performFly()&#123;</div><div class="line">        flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 叫行为接口</div><div class="line">     */</div><div class="line">    public void performQuack()&#123;</div><div class="line">        quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 公共方法</div><div class="line">     */</div><div class="line">    public void swim()&#123;</div><div class="line">        System.out.println(&quot;所有鸭子都在水上浮着游泳,即使是诱饵鸭也是&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 动态设置飞行行为</div><div class="line">     * @param fb</div><div class="line">     */</div><div class="line">    public void setFlyBehavior(FlyBehavior fb)&#123;</div><div class="line">        flyBehavior = fb;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *动态设置叫的行为</div><div class="line">     * @param qb</div><div class="line">     */</div><div class="line">    public void setQuackBehavior(QuackBehavior qb)&#123;</div><div class="line">        quackBehavior = qb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="行为类接口"><a href="#行为类接口" class="headerlink" title="行为类接口"></a>行为类接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public interface FlyBehavior &#123;</div><div class="line">    /**</div><div class="line">     * 飞行行为，所有实现该接口都必须重写该方法</div><div class="line">     */</div><div class="line">    public void fly();</div><div class="line">&#125;</div><div class="line">public interface QuackBehavior &#123;</div><div class="line">    /**</div><div class="line">     * 叫行为，所有实现该接口都必须重写该方法</div><div class="line">     */</div><div class="line">    public void quack();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="具体行为"><a href="#具体行为" class="headerlink" title="具体行为"></a>具体行为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class FlyNoWay implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;我不会飞，很尴尬&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyRocketPowered implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;坐着火箭的鸭子，你怕不怕？&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyWithWings implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;我会飞，I&apos;m fly&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class MuteQuack implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;silence 我很安静，不会叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Quack implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;我是会叫的鸭子&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Squeak implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;我的叫声很尖，可以刺痛你的耳朵&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="模型鸭和绿头鸭"><a href="#模型鸭和绿头鸭" class="headerlink" title="模型鸭和绿头鸭"></a>模型鸭和绿头鸭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ModeDuck extends Duck &#123;</div><div class="line">    /**</div><div class="line">     * 初始化构造方法,</div><div class="line">     * quackBehavior和flyBehavior对象都继承自父类Duck</div><div class="line">     */</div><div class="line">    public ModeDuck()&#123;</div><div class="line">        flyBehavior = new FlyNoWay();//初始化一个不会飞的鸭子</div><div class="line">        quackBehavior = new Quack();//初始化会叫</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;我是一个模型鸭子&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class MallardDuck extends Duck &#123;</div><div class="line">    /**</div><div class="line">     * 初始化构造方法,</div><div class="line">     * quackBehavior和flyBehavior对象都继承自父类Duck</div><div class="line">     */</div><div class="line">    public MallardDuck()&#123;</div><div class="line">        quackBehavior = new Quack();//绿头鸭使用Quack类处理呱呱叫所以当 performQuack被调用时叫的职责被委托给Quack对象，而我们得到了真正的呱呱叫</div><div class="line">        flyBehavior = new FlyWithWings();//使用FlyWithWings作为其FlyBehavior的类型</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;我是真的绿头鸭&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       Duck mallard = new MallardDuck();</div><div class="line">        mallard.performFly();</div><div class="line">        mallard.performQuack();</div><div class="line">        mallard.setQuackBehavior(new MuteQuack());</div><div class="line">        mallard.performQuack();</div><div class="line">        mallard.display();</div><div class="line">        </div><div class="line">        Duck model = new ModeDuck();</div><div class="line">        model.performFly();</div><div class="line">        model.setFlyBehavior(new FlyRocketPowered());</div><div class="line">        model.performFly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>我会飞，I’m fly<br>我是会叫的鸭子<br>silence 我很安静，不会叫<br>我是真的绿头鸭</p><p>我不会飞，很尴尬<br>坐着火箭的鸭子，你怕不怕？</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="/css/images/strategy.jpg" alt="image"></p><h3 id="可应用场景"><a href="#可应用场景" class="headerlink" title="可应用场景"></a>可应用场景</h3><ol><li>多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。</li><li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li><li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果想要新增加一个鸭子就新建一个鸭子类继承Duck类，实现鸭子的行为，如果想要添加鸭子的行为，可直接在Duck类里添加，所有的鸭子都继承自该类，可以动态设置鸭子的飞行和叫的行为。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;鸭子的父类，所有鸭子都继承自该类&quot;&gt;&lt;a href=&quot;#鸭子的父类，所有鸭子都继承自该类&quot; class=&quot;headerlink&quot; title=&quot;鸭子的父类，所有鸭子都继承自该类&quot;&gt;&lt;/a&gt;鸭子的父类，所有鸭子都继承自该类&lt;/h3&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装jmagick</title>
    <link href="http://yoursite.com/2016/07/21/Linux%E5%AE%89%E8%A3%85jmagick/"/>
    <id>http://yoursite.com/2016/07/21/Linux安装jmagick/</id>
    <published>2016-07-21T14:39:13.000Z</published>
    <updated>2016-07-21T14:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1.sudo apt-get install imagemagick libmagickwand-dev libjmagick6-java<br>2.sudo cp /usr/lib/jni/libJMagick.so /usr/lib/<br>3.find / -name jmagick.jar(找到jmagick.jar文件)<br>4.将jmagick.jar 拷贝到tomcat的bin目录下</p><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如无法安装则需要重新替换apt-get源</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;p&gt;1.sudo apt-get install imagemagick libmagickwand-dev libjmagick6-java&lt;br&gt;2.sudo cp /usr/lib/jni/libJMagick.so /usr/lib/&lt;br&gt;3.find / -name jmagick.jar(找到jmagick.jar文件)&lt;br&gt;4.将jmagick.jar 拷贝到tomcat的bin目录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jmagick" scheme="http://yoursite.com/tags/jmagick/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>makedown语法记录</title>
    <link href="http://yoursite.com/2016/03/31/makedown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/03/31/makedown语法记录/</id>
    <published>2016-03-31T07:14:21.000Z</published>
    <updated>2017-03-13T08:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1</li><li>2</li><li>3<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3></li></ul><ol><li>1</li><li>2</li><li>3<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>promiselove.github.io</p></blockquote></li></ol><h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p><a href="http://www.baidu.com" target="_blank" rel="external">baidu</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p><img src="/css/images/photoImg.jpg" alt="image"><br><strong>粗体</strong><br><em>斜体</em></p><p><code>public static void main(String[] sss){    System.out.println(&quot;hello world&quot;);}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;
    
    </summary>
    
    
      <category term="makedown" scheme="http://yoursite.com/tags/makedown/"/>
    
  </entry>
  
  <entry>
    <title>win64安装jmagick</title>
    <link href="http://yoursite.com/2016/03/18/win64%E5%AE%89%E8%A3%85jmagick/"/>
    <id>http://yoursite.com/2016/03/18/win64安装jmagick/</id>
    <published>2016-03-18T01:19:21.000Z</published>
    <updated>2016-03-18T08:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h3><p>1.64位JDK<br>2.32位JDK<br>3.ImageMagick-6.3.9-Q16（博主用的是Q16  用Q8的应该也是同样的方法）</p><a id="more"></a><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1.解压安装jmagick 将jmagick.dll放入windows/system32  和 windows/syswow64  和32位jdk的bin目录<br>2.将JAVA_HOME的路径指向位32位JDK位置(如果你使用的eclipse是64位要保证eclipse是开启状态，否则切换环境变量后打不开eclipse还得配回来)<br>3.eclipse项目的默认jdk添加为32位jdk<br>4.将jamgick的安装路径全部拷贝到32位jdk的bin下（有人说将jmagick的安装路径配到CLASSPATH中，博主试过但是没有成功）<br>5.将JDK的路径配回64位的jdk路径</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>项目使用的是32位jdk 而eclipse使用的是64位的JDK环境，所以jmagick可以使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;所需工具&quot;&gt;&lt;a href=&quot;#所需工具&quot; class=&quot;headerlink&quot; title=&quot;所需工具&quot;&gt;&lt;/a&gt;所需工具&lt;/h3&gt;&lt;p&gt;1.64位JDK&lt;br&gt;2.32位JDK&lt;br&gt;3.ImageMagick-6.3.9-Q16（博主用的是Q16  用Q8的应该也是同样的方法）&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jmagick" scheme="http://yoursite.com/tags/jmagick/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://yoursite.com/2016/03/15/hello-world/"/>
    <id>http://yoursite.com/2016/03/15/hello-world/</id>
    <published>2016-03-15T13:08:43.000Z</published>
    <updated>2016-03-15T13:11:04.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
