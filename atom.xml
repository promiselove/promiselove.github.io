<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amadeus的博客</title>
  
  <subtitle>每一次失败都是成长的经历，每一次挫折都是成长的过程.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-31T03:09:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Amadeus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之装饰者模式</title>
    <link href="http://yoursite.com/2017/10/31/decorator/"/>
    <id>http://yoursite.com/2017/10/31/decorator/</id>
    <published>2017-10-31T02:30:03.000Z</published>
    <updated>2017-10-31T03:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是装饰者模式？"><a href="#什么是装饰者模式？" class="headerlink" title="什么是装饰者模式？"></a>什么是装饰者模式？</h3><p>定义：装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>1.开闭原则，即对修改关闭，对扩展开放<br>2.多用组合，少用继承</p><a id="more"></a><h3 id="以咖啡店售卖咖啡为例"><a href="#以咖啡店售卖咖啡为例" class="headerlink" title="以咖啡店售卖咖啡为例"></a>以咖啡店售卖咖啡为例</h3><p>咖啡是所有咖啡和咖啡调味品的基类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class Coffee &#123;</div><div class="line">    protected String name;</div><div class="line"></div><div class="line">    public String getName()&#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract double getPrice();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建一个摩卡咖啡继承自该基类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Mocha extends Coffee &#123;</div><div class="line"></div><div class="line">    public Mocha()&#123;</div><div class="line">        name = &quot;摩卡咖啡&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 20;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再来一个调味品抽象类继承咖啡基类，该类是所有调味品的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Condiment extends Coffee &#123;</div><div class="line">    public abstract String getName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>具体的咖啡装饰者继承自调味品类(给咖啡加点糖)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Sugar extends Condiment &#123;</div><div class="line">    Coffee coffee;</div><div class="line"></div><div class="line">    public Sugar(Coffee coffee)&#123;</div><div class="line">        this.coffee = coffee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return coffee.getName()+&quot;,加糖&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 1+coffee.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再给咖啡加点奶<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Milk extends Condiment &#123;</div><div class="line">    Coffee coffee;</div><div class="line"></div><div class="line">    public Milk(Coffee coffee)&#123;</div><div class="line">        this.coffee = coffee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return coffee.getName()+&quot;,加牛奶&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public double getPrice() &#123;</div><div class="line">        return 2+coffee.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>好了，我们来写一个测试类测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Coffee coffees = new Mocha();</div><div class="line">        System.out.println(coffees.getName()+&quot;-价格-&quot;+coffees.getPrice());</div><div class="line">        Sugar sugars = new Sugar(coffees);</div><div class="line">        System.out.println(sugars.getName()+&quot;-价格-&quot;+sugars.getPrice());</div><div class="line">        Milk milks = new Milk(sugars);</div><div class="line">        System.out.println(milks.getName()+&quot;-价格-&quot;+milks.getPrice());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果<br>摩卡咖啡-价格-20.0<br>摩卡咖啡,加糖-价格-21.0<br>摩卡咖啡,加糖,加牛奶-价格-23.0</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果有再多一个装饰者我们只需要扩展一个类去继承自调味品类，然后去装饰咖啡就行了。同样的再多一个咖啡品种我们只需要去继承自咖啡的基类就行了。java的io实现也是装饰者模式，都是围绕着InputStream或者OutputStream两个基类去扩展的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是装饰者模式？&quot;&gt;&lt;a href=&quot;#什么是装饰者模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是装饰者模式？&quot;&gt;&lt;/a&gt;什么是装饰者模式？&lt;/h3&gt;&lt;p&gt;定义：装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;
&lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;p&gt;1.开闭原则，即对修改关闭，对扩展开放&lt;br&gt;2.多用组合，少用继承&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略者模式</title>
    <link href="http://yoursite.com/2017/03/13/strategy/"/>
    <id>http://yoursite.com/2017/03/13/strategy/</id>
    <published>2017-03-13T07:51:21.000Z</published>
    <updated>2017-10-31T02:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鸭子的父类，所有鸭子都继承自该类"><a href="#鸭子的父类，所有鸭子都继承自该类" class="headerlink" title="鸭子的父类，所有鸭子都继承自该类"></a>鸭子的父类，所有鸭子都继承自该类</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public abstract class Duck &#123;</div><div class="line">    public FlyBehavior flyBehavior;</div><div class="line">    public QuackBehavior quackBehavior;</div><div class="line"></div><div class="line">    public Duck()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public abstract void display();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 飞行行为接口</div><div class="line">     */</div><div class="line">    public void performFly()&#123;</div><div class="line">        flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 叫行为接口</div><div class="line">     */</div><div class="line">    public void performQuack()&#123;</div><div class="line">        quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 公共方法</div><div class="line">     */</div><div class="line">    public void swim()&#123;</div><div class="line">        System.out.println(&quot;所有鸭子都在水上浮着游泳,即使是诱饵鸭也是&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 动态设置飞行行为</div><div class="line">     * @param fb</div><div class="line">     */</div><div class="line">    public void setFlyBehavior(FlyBehavior fb)&#123;</div><div class="line">        flyBehavior = fb;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *动态设置叫的行为</div><div class="line">     * @param qb</div><div class="line">     */</div><div class="line">    public void setQuackBehavior(QuackBehavior qb)&#123;</div><div class="line">        quackBehavior = qb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="行为类接口"><a href="#行为类接口" class="headerlink" title="行为类接口"></a>行为类接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public interface FlyBehavior &#123;</div><div class="line">    /**</div><div class="line">     * 飞行行为，所有实现该接口都必须重写该方法</div><div class="line">     */</div><div class="line">    public void fly();</div><div class="line">&#125;</div><div class="line">public interface QuackBehavior &#123;</div><div class="line">    /**</div><div class="line">     * 叫行为，所有实现该接口都必须重写该方法</div><div class="line">     */</div><div class="line">    public void quack();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="具体行为"><a href="#具体行为" class="headerlink" title="具体行为"></a>具体行为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class FlyNoWay implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;我不会飞，很尴尬&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyRocketPowered implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;坐着火箭的鸭子，你怕不怕？&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class FlyWithWings implements FlyBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void fly() &#123;</div><div class="line">        System.out.println(&quot;我会飞，I&apos;m fly&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class MuteQuack implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;silence 我很安静，不会叫&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Quack implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;我是会叫的鸭子&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Squeak implements QuackBehavior &#123;</div><div class="line">    @Override</div><div class="line">    public void quack() &#123;</div><div class="line">        System.out.println(&quot;我的叫声很尖，可以刺痛你的耳朵&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="模型鸭和绿头鸭"><a href="#模型鸭和绿头鸭" class="headerlink" title="模型鸭和绿头鸭"></a>模型鸭和绿头鸭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ModeDuck extends Duck &#123;</div><div class="line">    /**</div><div class="line">     * 初始化构造方法,</div><div class="line">     * quackBehavior和flyBehavior对象都继承自父类Duck</div><div class="line">     */</div><div class="line">    public ModeDuck()&#123;</div><div class="line">        flyBehavior = new FlyNoWay();//初始化一个不会飞的鸭子</div><div class="line">        quackBehavior = new Quack();//初始化会叫</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;我是一个模型鸭子&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class MallardDuck extends Duck &#123;</div><div class="line">    /**</div><div class="line">     * 初始化构造方法,</div><div class="line">     * quackBehavior和flyBehavior对象都继承自父类Duck</div><div class="line">     */</div><div class="line">    public MallardDuck()&#123;</div><div class="line">        quackBehavior = new Quack();//绿头鸭使用Quack类处理呱呱叫所以当 performQuack被调用时叫的职责被委托给Quack对象，而我们得到了真正的呱呱叫</div><div class="line">        flyBehavior = new FlyWithWings();//使用FlyWithWings作为其FlyBehavior的类型</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void display() &#123;</div><div class="line">        System.out.println(&quot;我是真的绿头鸭&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       Duck mallard = new MallardDuck();</div><div class="line">        mallard.performFly();</div><div class="line">        mallard.performQuack();</div><div class="line">        mallard.setQuackBehavior(new MuteQuack());</div><div class="line">        mallard.performQuack();</div><div class="line">        mallard.display();</div><div class="line">        </div><div class="line">        Duck model = new ModeDuck();</div><div class="line">        model.performFly();</div><div class="line">        model.setFlyBehavior(new FlyRocketPowered());</div><div class="line">        model.performFly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>我会飞，I’m fly<br>我是会叫的鸭子<br>silence 我很安静，不会叫<br>我是真的绿头鸭</p><p>我不会飞，很尴尬<br>坐着火箭的鸭子，你怕不怕？</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="/css/images/strategy.jpg" alt="image"></p><h3 id="可应用场景"><a href="#可应用场景" class="headerlink" title="可应用场景"></a>可应用场景</h3><ol><li>多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。</li><li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li><li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果想要新增加一个鸭子就新建一个鸭子类继承Duck类，实现鸭子的行为，如果想要添加鸭子的行为，可直接在Duck类里添加，所有的鸭子都继承自该类，可以动态设置鸭子的飞行和叫的行为。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;鸭子的父类，所有鸭子都继承自该类&quot;&gt;&lt;a href=&quot;#鸭子的父类，所有鸭子都继承自该类&quot; class=&quot;headerlink&quot; title=&quot;鸭子的父类，所有鸭子都继承自该类&quot;&gt;&lt;/a&gt;鸭子的父类，所有鸭子都继承自该类&lt;/h3&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装jmagick</title>
    <link href="http://yoursite.com/2016/07/21/Linux%E5%AE%89%E8%A3%85jmagick/"/>
    <id>http://yoursite.com/2016/07/21/Linux安装jmagick/</id>
    <published>2016-07-21T14:39:13.000Z</published>
    <updated>2016-07-21T14:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1.sudo apt-get install imagemagick libmagickwand-dev libjmagick6-java<br>2.sudo cp /usr/lib/jni/libJMagick.so /usr/lib/<br>3.find / -name jmagick.jar(找到jmagick.jar文件)<br>4.将jmagick.jar 拷贝到tomcat的bin目录下</p><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如无法安装则需要重新替换apt-get源</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;p&gt;1.sudo apt-get install imagemagick libmagickwand-dev libjmagick6-java&lt;br&gt;2.sudo cp /usr/lib/jni/libJMagick.so /usr/lib/&lt;br&gt;3.find / -name jmagick.jar(找到jmagick.jar文件)&lt;br&gt;4.将jmagick.jar 拷贝到tomcat的bin目录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jmagick" scheme="http://yoursite.com/tags/jmagick/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>makedown语法记录</title>
    <link href="http://yoursite.com/2016/03/31/makedown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/03/31/makedown语法记录/</id>
    <published>2016-03-31T07:14:21.000Z</published>
    <updated>2017-03-13T08:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1</li><li>2</li><li>3<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3></li></ul><ol><li>1</li><li>2</li><li>3<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>promiselove.github.io</p></blockquote></li></ol><h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p><a href="http://www.baidu.com" target="_blank" rel="external">baidu</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p><img src="/css/images/photoImg.jpg" alt="image"><br><strong>粗体</strong><br><em>斜体</em></p><p><code>public static void main(String[] sss){    System.out.println(&quot;hello world&quot;);}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;
    
    </summary>
    
    
      <category term="makedown" scheme="http://yoursite.com/tags/makedown/"/>
    
  </entry>
  
  <entry>
    <title>win64安装jmagick</title>
    <link href="http://yoursite.com/2016/03/18/win64%E5%AE%89%E8%A3%85jmagick/"/>
    <id>http://yoursite.com/2016/03/18/win64安装jmagick/</id>
    <published>2016-03-18T01:19:21.000Z</published>
    <updated>2016-03-18T08:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h3><p>1.64位JDK<br>2.32位JDK<br>3.ImageMagick-6.3.9-Q16（博主用的是Q16  用Q8的应该也是同样的方法）</p><a id="more"></a><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1.解压安装jmagick 将jmagick.dll放入windows/system32  和 windows/syswow64  和32位jdk的bin目录<br>2.将JAVA_HOME的路径指向位32位JDK位置(如果你使用的eclipse是64位要保证eclipse是开启状态，否则切换环境变量后打不开eclipse还得配回来)<br>3.eclipse项目的默认jdk添加为32位jdk<br>4.将jamgick的安装路径全部拷贝到32位jdk的bin下（有人说将jmagick的安装路径配到CLASSPATH中，博主试过但是没有成功）<br>5.将JDK的路径配回64位的jdk路径</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>项目使用的是32位jdk 而eclipse使用的是64位的JDK环境，所以jmagick可以使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;所需工具&quot;&gt;&lt;a href=&quot;#所需工具&quot; class=&quot;headerlink&quot; title=&quot;所需工具&quot;&gt;&lt;/a&gt;所需工具&lt;/h3&gt;&lt;p&gt;1.64位JDK&lt;br&gt;2.32位JDK&lt;br&gt;3.ImageMagick-6.3.9-Q16（博主用的是Q16  用Q8的应该也是同样的方法）&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jmagick" scheme="http://yoursite.com/tags/jmagick/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://yoursite.com/2016/03/15/hello-world/"/>
    <id>http://yoursite.com/2016/03/15/hello-world/</id>
    <published>2016-03-15T13:08:43.000Z</published>
    <updated>2016-03-15T13:11:04.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
